<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" implements="utils.interfaces.ISceneContent"
		 xmlns:s="library://ns.adobe.com/flex/spark" width="100%" height="100%" initialize="onInit(event)"
		 xmlns:mx="library://ns.adobe.com/flex/mx" left="20" right="20" top="20" bottom="10" xmlns:button="application.components.button.*" xmlns:buttonswf="application.components.buttonswf.*" xmlns:minigames="application.gamecontainer.scene.minigames.*" xmlns:money="application.gamecontainer.persinfobar.money.*" xmlns:simplerule="application.gamecontainer.scene.minigames.simplerule.*" xmlns:betsroom="application.gamecontainer.scene.minigames.betsroom.*">
	<fx:Script>
		<![CDATA[
			import application.GameApplication;
			
			import flash.utils.clearInterval;
			import flash.utils.setInterval;
			
			import mx.events.FlexEvent;
			
			import spark.filters.GlowFilter;
			
			import utils.interfaces.ISceneContent;
			import utils.managers.flashing.FlashingManager;
			
			[Bindable]
			public var bank:int;
			public var passtime:int;
			private var _sid:int = -1;
			private var _hilightid:int = -1;
			private var _items:Array = new Array();
			private var _itemsObj:Object = new Object();
			
			private var _flashingManager:FlashingManager;
			
			public function updateBetsInfo(action:Object):void{
				var betsObj:Object = new Object();
				var mybetsObj:Object = new Object();
				var bets:Array = action["betsinfo"]["bets"];
				if(bets && bets.length > 0){
					for(var i:uint = 0; i < bets.length; i++){
						betsObj[bets[i]["betsection"]] = int(betsObj[bets[i]["betsection"]]) + int(bets[i]["bet"]);
						
						if(bets[i]["userid"] == GameApplication.app.userinfomanager.myuser.id){
							mybetsObj[bets[i]["betsection"]] = int(mybetsObj[bets[i]["betsection"]]) + int(bets[i]["bet"]);
						}
					}
				}
				
				for(var j:uint = 0; j < _items.length; j++){
					(_items[j] as BetItemRenderer).mybet.money = mybetsObj[j + 1];
					(_items[j] as BetItemRenderer).allbet.money = betsObj[j + 1];
				}
				
				passtime = action["time"];
				
				if(_sid != -1){
					clearInterval(_sid);
					_sid = -1;
				}
				
				if(passtime > 0){
					_sid = setInterval(timeupdate, 1000);
				}
				
				var minute:uint = Math.floor(passtime / 60);
				var seconds:uint = passtime - minute * 60;
				
				if(minute > 9){
					ltime.text = "" + minute;
				}else{
					ltime.text = "0" + minute;
				}
				ltime.text += " : ";
				if(seconds > 9){
					ltime.text += "" + seconds;
				}else{
					ltime.text += "0" + seconds;
				}
			}
			
			private function timeupdate():void{
				passtime--;				
				if(passtime <= 0){
					if(_sid != -1){
						clearInterval(_sid);
						_sid = -1;
					}
				}
				
				var minute:uint = Math.floor(passtime / 60);
				var seconds:uint = passtime - minute * 60;
				
				if(minute > 9){
					ltime.text = "" + minute;
				}else{
					ltime.text = "0" + minute;
				}
				ltime.text += " : ";
				if(seconds > 9){
					ltime.text += "" + seconds;
				}else{
					ltime.text += "0" + seconds;
				}
			}			
					
			protected function onBack(event:MouseEvent):void{
				GameApplication.app.gamemanager.exitBetsMiniGame();
				GameApplication.app.navigator.goMiniGames();
			}
			
			protected function onExit(event:MouseEvent):void{
				GameApplication.app.gamemanager.exitBetsMiniGame();
				GameApplication.app.navigator.goHome();
			}
			
			public function onHide():void{
				clearInterval(_hilightid);
				_items = null;
				_itemsObj = null;
			}

			protected function onInit(event:FlexEvent):void
			{
				_hilightid = setInterval(hilight, 1000);
				_flashingManager = new FlashingManager(100);
				
				GameApplication.app.gamemanager.addToBetsMiniGame();
				
				for(var i:uint = 0; i < 4 * 3; i++){
					var item:BetItemRenderer = new BetItemRenderer();
					item.sectionIndex = i + 1;
					itemsGroup.addElement(item);
					
					_items.push(item);
					_itemsObj[item.sectionIndex] = item;
				}
			}
			
			private function hilight():void{
				var rnd:uint = Math.floor(Math.random() * _items.length);
				for(var i:uint = 0; i < _items.length; i++){
					if(i == rnd){
						(_items[i] as BetItemRenderer).filters = [new spark.filters.GlowFilter(0xffffff, 1, 8, 8, 2)];
					}else{
						(_items[i] as BetItemRenderer).filters = [];
					}
				}
			}
			
			public function selectWinnerSection(section:uint):void{
				var item:BetItemRenderer = _itemsObj[section];
				_flashingManager.addFlashingElement(item, 20);
			}

		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%" radiusX="0" radiusY="0">
		<s:stroke>
			<mx:SolidColorStroke color="0x583016"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0x8D4F25"/>
		</s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingLeft="20" paddingRight="20" paddingTop="10" paddingBottom="10">		
		<s:Label width="100%" textAlign="center" text="Комната ставок" fontSize="30" color="0xFFFFCC" fontWeight="bold" fontStyle="italic"/>
		<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			
			<s:VGroup width="100%" height="100%" horizontalAlign="center" gap="3">
				<s:TileGroup verticalGap="4" horizontalGap="4" id="itemsGroup" height="100%" maxWidth="400"/>
				<s:Label id="ltime" color="0xffffff" text="00 : 30" fontSize="15" width="100%" textAlign="center" fontWeight="bold"/>
			</s:VGroup>
			
		</s:HGroup>
		<s:HGroup width="100%" horizontalAlign="right">
			<button:GameButton id="back" label="назад" click="onBack(event)"/>
			<button:GameButton id="exit" label="выйти" click="onExit(event)"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>